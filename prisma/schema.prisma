// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ============================================
// MODELS
// ============================================

model User {
  id          String     @id @default(uuid())
  name        String
  email       String     @unique
  avatar      String?                         // URL oder Pfad zum Avatar
  role        UserRole   @default(MEMBER)
  
  // Relations
  projects    ProjectMember[]
  assignedTasks Task[]
  timeEntries TimeEntry[]                     // Zeiteinträge des Benutzers
  
  // Timestamps
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  @@index([email])
  @@map("users")
}

enum UserRole {
  ADMIN   @map("admin")
  MEMBER  @map("member")
  VIEWER  @map("viewer")
}

model Client {
  id        String       @id @default(uuid())
  name      String
  email     String       @unique
  phone     String?
  company   String?
  website   String?
  status    ClientStatus @default(ACTIVE)
  
  // Relations
  projects  Project[]
  
  // Soft Delete (für zukünftige Erweiterung)
  deletedAt DateTime?    @map("deleted_at")
  
  // Timestamps
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")

  @@index([email])
  @@index([status])
  @@map("clients")
}

enum ClientStatus {
  LEAD     @map("lead")
  ACTIVE   @map("active")
  INACTIVE @map("inactive")
}

model Project {
  id          String        @id @default(uuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  budget      Float?
  startDate   DateTime?     @map("start_date")
  endDate     DateTime?     @map("end_date")
  
  // Relations
  clientId    String        @map("client_id")
  client      Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  tasks       Task[]
  notes       Note[]
  attachments Attachment[]
  members     ProjectMember[]
  timeEntries TimeEntry[]   // Zeiteinträge für dieses Projekt
  
  // Soft Delete (für zukünftige Erweiterung)
  deletedAt   DateTime?     @map("deleted_at")
  
  // Timestamps
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  @@index([clientId])
  @@index([status])
  @@map("projects")
}

enum ProjectStatus {
  PLANNING     @map("planning")
  IN_PROGRESS  @map("in_progress")
  REVIEW       @map("review")
  COMPLETED    @map("completed")
  ON_HOLD      @map("on_hold")
}

model Task {
  id          String       @id @default(uuid())
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?    @map("due_date")
  
  // Relations
  projectId   String       @map("project_id")
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  assignedToId String?     @map("assigned_to_id")
  assignedTo   User?       @relation(fields: [assignedToId], references: [id], onDelete: SetNull)
  
  timeEntries TimeEntry[]  // Zeiteinträge für diese Aufgabe
  
  // Timestamps
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  @@index([projectId])
  @@index([assignedToId])
  @@index([status])
  @@index([dueDate])
  @@map("tasks")
}

enum TaskStatus {
  TODO        @map("todo")
  IN_PROGRESS @map("in_progress")
  DONE        @map("done")
}

enum TaskPriority {
  LOW    @map("low")
  MEDIUM @map("medium")
  HIGH   @map("high")
}

model Note {
  id        String   @id @default(uuid())
  title     String
  content   String
  
  // Relations
  projectId String   @map("project_id")
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([projectId])
  @@map("notes")
}

model Activity {
  id          String       @id @default(uuid())
  type        ActivityType
  entityType  String       @map("entity_type")  // 'client', 'project', 'task', 'note'
  entityId    String       @map("entity_id")
  entityName  String       @map("entity_name")  // Name des betroffenen Objekts
  description String                             // z.B. "Status geändert von TODO zu IN_PROGRESS"
  metadata    String?                            // JSON-String für zusätzliche Daten
  
  // User-Info (später mit User-Model verknüpfen)
  userId      String?      @map("user_id")
  userName    String?      @map("user_name")    // z.B. "System" oder "Admin"
  
  // Timestamps
  createdAt   DateTime     @default(now()) @map("created_at")

  @@index([entityType, entityId])
  @@index([type])
  @@index([createdAt])
  @@map("activities")
}

enum ActivityType {
  CREATED        @map("created")
  UPDATED        @map("updated")
  DELETED        @map("deleted")
  STATUS_CHANGED @map("status_changed")
  ASSIGNED       @map("assigned")
  COMMENTED      @map("commented")
}

model Attachment {
  id          String   @id @default(uuid())
  filename    String                         // Original filename
  filepath    String                         // Path where file is stored
  filesize    Int                            // Size in bytes
  mimetype    String                         // MIME type (e.g., 'application/pdf')
  
  // Relations
  projectId   String   @map("project_id")
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // User-Info (wer hat hochgeladen)
  uploadedBy  String?  @map("uploaded_by")
  
  // Timestamps
  createdAt   DateTime @default(now()) @map("created_at")

  @@index([projectId])
  @@map("attachments")
}

// Many-to-Many Relation zwischen Projects und Users
model ProjectMember {
  id        String   @id @default(uuid())
  
  // Relations
  projectId String   @map("project_id")
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Role im Projekt
  role      ProjectMemberRole @default(MEMBER)
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
  @@map("project_members")
}

enum ProjectMemberRole {
  OWNER  @map("owner")
  MEMBER @map("member")
  VIEWER @map("viewer")
}

model TimeEntry {
  id          String    @id @default(uuid())
  description String?                         // Optionale Beschreibung der Tätigkeit
  startTime   DateTime  @map("start_time")    // Wann wurde gestartet
  endTime     DateTime? @map("end_time")      // Wann wurde gestoppt (null = läuft noch)
  duration    Int?                            // Dauer in Sekunden (wird berechnet bei endTime)
  
  // Relations
  taskId      String?   @map("task_id")       // Optional: Kann auch ohne Task genutzt werden
  task        Task?     @relation(fields: [taskId], references: [id], onDelete: SetNull)
  
  projectId   String    @map("project_id")
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  userId      String?   @map("user_id")       // Wer hat die Zeit erfasst
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Timestamps
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@index([projectId])
  @@index([taskId])
  @@index([userId])
  @@index([startTime])
  @@map("time_entries")
}
